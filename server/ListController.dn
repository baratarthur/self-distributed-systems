const char debugMSG[] = "[@ListController]"

component provides server.ListController requires io.Output out, repositories.ListRepository listRepository,
    data.IntUtil iu, data.StringUtil su, data.json.JSONEncoder je {
    char resource[] = "/list"
    
    Response ListController:handle(HTTPMessage request) {
        out.println("$debugMSG - resource requested - $(request.resource)")
        if(request.resource == resource) {
            if(request.command == "GET") return handleGet(request)
            else if(request.command == "POST") return handlePost(request)
        }

        if(request.resource == new char[](resource, "/all")) return handleGetAll(request)

        return null
    }

    Response ListController:handleGet(HTTPMessage request) {
        out.println("$debugMSG - get")
        return buildResponseCode200("$(listRepository.getString())", request.mimeType)
    }

    Response ListController:handlePost(HTTPMessage request) {
        out.println("$debugMSG - post")
        Node n = je.jsonToData(request.postData, typeof(Node))
        listRepository.add(n)
        return buildResponseCode201("accepted POST", request.mimeType)
    }

    Response ListController:handleGetAll(HTTPMessage request) {
        out.println("$debugMSG - get all")
        return buildResponseCode200("$(je.jsonFromArray(listRepository.getAll()))", request.mimeType)
    }

    Response buildResponseCode200(char content[], char mimeType[]) {
        return new Response(
            200,
            "OK",
            HTTPUtil.SERVER_NAME,
            content.arrayLength,
            mimeType,
            content
        )
    }

    Response buildResponseCode201(char content[], char mimeType[]) {
        return new Response(
            201,
            "Created",
            HTTPUtil.SERVER_NAME,
            content.arrayLength,
            mimeType,
            content
        )
    }

}