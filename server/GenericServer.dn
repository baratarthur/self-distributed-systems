uses Constants

const char debugMSG[] = "[@GenericServer]"

component provides server.GenericServer requires net.TCPSocket, net.TCPServerSocket,
    io.Output out, data.IntUtil iu,  data.json.JSONEncoder je, data.StringUtil su,
    rpc.RPCUtil rpc, repositories.ListRepository listRepository {
    bool serviceStatus = false
    TCPServerSocket host
    
    void GenericServer:start(int PORT) {
        host = new TCPServerSocket()
        serviceStatus = true
        
        if (!host.bind(TCPServerSocket.ANY_ADDRESS, PORT)) {
			out.println("Error: failed to bind master socket")
			return
		}

        out.println("$debugMSG - Server started on port $(iu.makeString(PORT))")

        while (serviceStatus) {
			TCPSocket client = new TCPSocket()
			if (client.accept(host)) { asynch::handleRequest(client) }
		}
    }

    void GenericServer:handleRequest(TCPSocket s) {
        char requestContent[] = rpc.receiveData(s)
        if(requestContent == null) s.disconnect()
        out.println("$debugMSG - content - $requestContent")
        Request req = rpc.parseRequestFromString(requestContent)
        Response res = process(req)
        char rawResponse[] = rpc.buildRawResponse(res)
        out.println("$debugMSG - response - $rawResponse")
        s.send(rawResponse)
        s.disconnect()
    }

    Response process(Request req) {
        char method[] = getMethodFromMetadata(req.meta)
        if(method == "add") {
            Node newNode = je.jsonToData(req.content, typeof(Node))
            listRepository.add(newNode)
            return buildResponseWithoutData("add", "200")
        }
        else if(method == "getAll") {
            return buildResponseWithData(
                je.jsonFromArray(listRepository.getAll()),
                "Node[]",
                "getAll",
                "200"
            )
        }
        else if(method == "clear") {
            listRepository.clear()
            return buildResponseWithoutData("clear", "200")
        } else if(method == "size") {
            return buildResponseWithData(
                iu.makeString(listRepository.size()),
                "int",
                "size",
                "200"
            )
        }

        return buildResponseWithoutData(method, "404")
    }

    char[] getMethodFromMetadata(Metadata meta[]) {
        for(int i =0; i < meta.arrayLength; i++) {
            if(meta[i].name == "method") return meta[i].value
        }

        return ""
    }

    Response buildResponseWithData(char content[], char dataType[], char method[], char status[]) {
        return new Response(buildMetaForMethod(method, status, dataType), content)
    }

    Response buildResponseWithoutData(char method[], char status[]) {
        return new Response(buildMetaForMethod(method, status))
    }

    Metadata[] buildMetaForMethod(char method[], char status[], opt char dataType[]) {
        Metadata metaMethod = new Metadata("method", method)
        Metadata transactionStatus = new Metadata("status", status)
        if(isset dataType) {
            Metadata metaDataType = new Metadata("data-type", dataType)
            return new Metadata[](metaMethod, metaDataType, transactionStatus)
        }
        return new Metadata[](metaMethod, transactionStatus)
    }
}