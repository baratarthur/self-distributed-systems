component provides App requires server.Server server, io.Input in, io.Output out, data.IntUtil iu {
    void printOptions() {
        out.println("Options:")
        out.println("1 - use list")
        out.println("2 - use proxy list")
        out.println("3 - exit")
        out.print("option> ")
    }

    void processOption(int option) {
        if (option == 0) {
            server.init()
        } else if (option == 1) {
            server.adaptTo()
        } else if (option == 2) {
            server.adaptTo("repositories/ListRepositoryProxy.o")
        } else {
            out.println("Nao deu bom $option")
        }
    }
    
    int App:main(AppParam params[]) {
        int instruction = 0
        while(instruction != 3) {
            asynch::processOption(instruction)
            printOptions()
            char userInput[] = in.readln()
            instruction = iu.intFromString(userInput)
        }
        
        return 0
    }
}